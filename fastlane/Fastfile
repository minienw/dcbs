# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  # -- TESTING -- 
  desc "Run tests for integration purposes"
  lane :test_ci do
    prepare

    run_tests(
      app_name: "CTR",
      device: "iPhone 12",
      project: "CTR.xcodeproj",
      scheme: "Holder Dev",
      reinstall_app: true,
      app_identifier: "nl.rijksoverheid.ctr.dev",
      skip_slack: true
    )
  end

  # -- DEPLOYING -- 

  # -- Deploy all based on Environment

  desc "Build and deploy the apps for Test via Firebase from CI"
  lane :deploy_test_ci do

    ## Deploy Holder Test: 
    deploycombined(
      x_provisioning_profile_path: "fastlane/profiles/CoronaCheck_Holder_Test.mobileprovision",
      x_xcodeproj: "CTR.xcodeproj",
      x_targetname: "Holder",
      x_schemename:  "Holder Test",
      x_configuration: "FirebaseTest",
      x_provisioningprofilename: "CoronaCheck Holder Test",
      x_bundleid: "nl.rijksoverheid.ctr.test",
      x_firebaseappid: "1:168257592968:ios:5b5b37bd2aa002a526493d",
      x_firebasegroupscsv: "" #testers
    )

    ## Deploy Verifier Test: 
    deploycombined(
      x_provisioning_profile_path: "fastlane/profiles/CoronaCheck_Verifier_Test.mobileprovision",
      x_xcodeproj: "CTR.xcodeproj",
      x_targetname: "Verifier",
      x_schemename:  "Verifier Test",
      x_configuration: "FirebaseTest",
      x_provisioningprofilename: "CoronaCheck Verifier Test",
      x_bundleid: "nl.rijksoverheid.ctr.verifier.test",
      x_firebaseappid: "1:168257592968:ios:f8f08363d969e6bc26493d",
      x_firebasegroupscsv: "" #verifiers
    )

  end 

  desc "Build and deploy the apps for Acc via Firebase from CI"
  lane :deploy_acc_ci do

    ## Deploy Holder Test: 
    deploycombined(
      x_provisioning_profile_path: "fastlane/profiles/CoronaCheck_Holder_Acc.mobileprovision",
      x_xcodeproj: "CTR.xcodeproj",
      x_targetname: "Holder",
      x_schemename:  "Holder Acceptance",
      x_configuration: "FirebaseAcceptance",
      x_provisioningprofilename: "CoronaCheck Holder Acc",
      x_bundleid: "nl.rijksoverheid.ctr.acc",
      x_firebaseappid: "1:168257592968:ios:e39aba89b3caf97626493d",
      x_firebasegroupscsv: "" #testers
    )
    
    ## Deploy Verifier Test: 
    deploycombined(
      x_provisioning_profile_path: "fastlane/profiles/CoronaCheck_Verifier_Acc.mobileprovision",
      x_xcodeproj: "CTR.xcodeproj",
      x_targetname: "Verifier",
      x_schemename:  "Verifier Acceptance",
      x_configuration: "FirebaseAcceptance",
      x_provisioningprofilename: "CoronaCheck Verifier Acc",
      x_bundleid: "nl.rijksoverheid.ctr.verifier.acc",
      x_firebaseappid: "1:168257592968:ios:e3402385406b0d9726493d",
      x_firebasegroupscsv: "" #verifiers
    )

  end 

  desc "Build and deploy the apps for Prod via Firebase from CI"
  lane :deploy_prod_ci do

    ## Deploy Holder Test: 
    deploycombined(
      x_provisioning_profile_path: "fastlane/profiles/CoronaCheck_Holder_Prod.mobileprovision",
      x_xcodeproj: "CTR.xcodeproj",
      x_targetname: "Holder",
      x_schemename:  "Holder Production",
      x_configuration: "FirebaseProduction",
      x_provisioningprofilename: "CoronaCheck Holder Prod",
      x_bundleid: "nl.rijksoverheid.ctr",
      x_firebaseappid: "1:168257592968:ios:e0498230630ed6a826493d",
      x_firebasegroupscsv: "" #testers
    )

    ## Deploy Verifier Test: 
    deploycombined(
      x_provisioning_profile_path: "fastlane/profiles/CoronaCheck_Verifier_Prod.mobileprovision",
      x_xcodeproj: "CTR.xcodeproj",
      x_targetname: "Verifier",
      x_schemename:  "Verifier Production",
      x_configuration: "FirebaseProduction",
      x_provisioningprofilename: "CoronaCheck Verifier Prod",
      x_bundleid: "nl.rijksoverheid.ctr.verifier",
      x_firebaseappid: "1:168257592968:ios:6a903add03edb4a126493d",
      x_firebasegroupscsv: "" #verifiers
    )

  end 


  lane :deploycombined do |options|

    # unwrap options:
    provisioning_profile_path =   options[:x_provisioning_profile_path]
    xcodeproj =                   options[:x_xcodeproj]
    targetname =                  options[:x_targetname]
    schemename =                  options[:x_schemename]
    configuration =               options[:x_configuration]
    provisioningprofilename =     options[:x_provisioningprofilename]
    bundleid =                    options[:x_bundleid]
    firebase_app_id =             options[:x_firebaseappid]
    firebase_groups_csv =         options[:x_firebasegroupscsv]

    # Prepare:
    setup_ci(provider: "travis", force: true)
    prepare_certificate
    install_provisioning_profile(path: provisioning_profile_path)
    prepare

    # Version/Build number
    version = get_version_number(xcodeproj: xcodeproj, target: targetname, configuration: configuration)
    build_number = determine_build_number()
    increment_build_number(build_number: build_number, xcodeproj: xcodeproj)
    
    # Build:
    build_ios_app(
      scheme: schemename,
      configuration: configuration,
      export_options: {
        method: "ad-hoc",
        provisioningProfiles: {
          bundleid => provisioningprofilename
        }
      }
    )

    # Deploy to Firebase:
    firebase_app_distribution(
      app: firebase_app_id,
      groups: firebase_groups_csv
    )
    
    inform_slack(
      default_payloads: [:git_author],
      message: "Successfully distributed iOS #{schemename} app beta build #{version} (#{build_number}) :rocket:",
    )
  end


  # Private Lanes

  private_lane :prepare_certificate do
    import_certificate(
      certificate_path: ENV["CERTIFICATE_PATH"],
      certificate_password: ENV["CERTIFICATE_PASSWORD"],
      keychain_name: ENV["MATCH_KEYCHAIN_NAME"],
      keychain_password: ""
    )
  end

  private_lane :prepare do
    xcversion(version: "12.4")
  end

  private_lane :determine_build_number do |options|
      ENV['GITHUB_RUN_NUMBER']
  end

  private_lane :inform_slack do |options|
    unless ENV['SLACK_URL'].nil?
      slack(options)
    end
  end
end